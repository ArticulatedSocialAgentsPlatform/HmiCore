<project name="HMI-ALL" default="build" basedir="." 
   xmlns:ac="antlib:net.sf.antcontrib"   
>
 
 <property name="build.test.results.dir" location="${build.dir}/test/results" />
 <property name="test.report.dir"        value="${test.dir}/report" />
 
 
 <filelist id="rebuildList" dir="${shared.project.root}" files="${rebuild.list}" />
 <!--filelist id="nbList" dir="${shared.project.root}" files="${nb.list}" /-->
   
   <target name="resolveAll">
      <antcall target="Ivy.resolve"/>
      <delegate target="resolve" list="rebuildList" verbose="true"/>
   </target>
   
   <target name="-pre-docAll">
      <antcall target="-pre-doc"/>
      <delegate target="-pre-doc" list="rebuildList" verbose="true"/>
   </target>
   
   <target name="ivyxmlreportAll">
    <delegate target="ivyxmlreport" list="rebuildList" verbose="true"/>
   </target>

   <target name="ivyreportAll">
    <delegate target="ivyreport" list="rebuildList" verbose="true"/>
   </target>
   
   <!-- targets: -->
   
   <target name="nbuild" depends="nightlybuild" description="produce a nightly build of the Hmi project"/>
   <target name="testnbuild" depends="testnightlybuild" description="performs a nightly build of the Hmi project, without actually publishing"/>
    
   <target name="releaseAll"  description="produce a full minor release of the Hmi project">
       <property name="release.target" value="-minorrelease"/>
      <antcall target="releaselist" />
   </target>
   
   <target name="nightlybuild" >
    <!-- first some checking for parameters. We require either a version or a build number -->
      <fail message="HMI nightlybuild: No release.list specified" unless="release.list" />
      <ac:if>
         <isset property="version"/> 
      <ac:then>
          <ac:if>
              <or>
                 <isset property="build"/>
                 <isset property="devnum"/>
              </or>   
          <ac:then>
              <fail message="HMI nightlybuild: When forcing a particular version, a devnum or build number cannot be used" />
          </ac:then>
          </ac:if>
      </ac:then>
      <ac:else>
          <ac:if>
             <not>
                <isset property="build"/>
             </not>
          <ac:then>
             <fail message="HMI nightlybuild: No build number specified"  />
          </ac:then>
          </ac:if>
      </ac:else> 
      </ac:if>
      <!-- after checking, we finally do the real work here: -->
      <property name="devnum" value="${build}"/>
      <property name="release.target" value="-devrelease"/>
    
      <property name="nb.release.code" value="true"/>
      <property name="nb.release.resources" value="true"/>
      <ac:if>
         <equals arg1="${nb.release.code}" arg2="true"/>
      <ac:then>
         <antcall target="releaselist" >
            <param name="publish.resolver" value="hmicore.sftp.publish"/> <!-- overrides build.properties value -->
         </antcall>
      </ac:then>
      <ac:else>
         <echo message="NO RELEASE of CODE"/>
      </ac:else>
      </ac:if>   
      
      <ac:if>
         <equals arg1="${nb.release.resources}" arg2="true"/>
      <ac:then>
         <antcall target="releaseresourcelist">
            <param name="publish.resolver" value="resource.sftp.publish"/> <!-- overrides build.properties value -->
         </antcall>
      </ac:then>
       <ac:else>
         <echo message="NO RELEASE of RESOURCES"/>
      </ac:else>
      </ac:if>  
   </target>
   
   
   
   <target name="testnightlybuild" >
    <!-- first some checking for parameters. We require either a version or a build number -->
      <fail message="HMI nightlybuild: No release.list specified" unless="release.list" />
      <antcall target="testreleaselist" />  
   </target>
   
   
   
   
   
   <target name="buildAll" depends="cleanAll, compileAll" description="cleanAll, compileAll"/>  
  
   <target name="compileAll"  description="compile HMI projects">     
    <antcall target="Core.compile"/>
    <delegate target="compile" list="rebuildList" verbose="true"/>
   </target>
   
   <target name="compilelistAll">
    <antcall target="Core.compile"/>
    <delegate target="compilelist" list="rebuildList" verbose="true"/>     
   </target> 
    
   <target name="cleanAll"  description="cleans HMI projects">     
        <delegate target="clean" list="rebuildList" verbose="true"/>
   </target>
 
   <target name="compile-testsAll"  description="Runs junit tests on all HMI projects">     
        <!--antcall target="Core.junit"/--> 
        <delegate target="compile-tests" list="rebuildList"/>
   </target>
    
   <target name="junitAll"  description="Runs junit tests on all HMI projects">     
        <!--antcall target="Core.junit"/--> 
        <delegate target="-junit" list="rebuildList"/>
   </target>
 
    <target name="junitreportAll"  depends="junitAll" description="Runs junit tests on all HMI projects and produces html report">     
      <delete dir="${test.report.dir}" failonerror="false"/>
      <mkdir dir="${test.report.dir}"/>
      <mkdir dir="${build.test.results.dir}"/>
      <echo message="${build.test.results.dir}/TEST"/>
      <junitreport todir="${build.test.results.dir}" >
         <fileset dir=".">
            <include name="**/build/test/results/TEST-*.xml"/>
         </fileset>
         <report format="frames" todir="${test.report.dir}"/>
      </junitreport>
   </target>
   
    <target name="eclipseAll"  description="Create eclipse projects for all HMI projects">   
		<delegate target="eclipseproject" list="rebuildList"/>
	</target>
	<target name="eclipsesourceAll"  description="Create eclipse projects for all HMI projects">   
		<delegate target="eclipsesourceproject" list="rebuildList" verbose="true"/>
	</target>
   <target name="findbugsAll"  description="Runs findbugs on all HMI projects">     
        <delegate target="findbugsxml" list="rebuildList"/>
   </target>


   <target name="cpdAll"  description="Runs the code duplication checker on all Asap projects">     
        <mkdir dir="build"/>
        <cpd minimumTokenCount="100" format="xml" encoding="UTF-8" outputFile="build/cpd.xml"
   	ignoreLiterals="true" ignoreIdentifiers="true">
        <fileset dir=".">
            <include name="**/*.java"/>
        </fileset>
        </cpd>
   </target>
   
    <target name="cpdreportAll" depends="cpdAll">
	  <xslt in="build/cpd.xml" style="${shared.ant.dir}/pmd/etc/xslt/cpdhtml.xslt" 	  
	  out="build/cpd.html" />
    </target>
   

   <target name="checkstyleAll"  description="Runs checkstyle on all HMI projects">     
        <delegate target="checkstylexml" list="rebuildList"/>
   </target>


   <target name="docall" depends="-pre-docAll" description="Generate integrated Javadoc for the HMICore projects">
        <javadoc source="1.8"
            destdir="${javadoc.dir}"
            Overview="javadoc-overview.html" 
            doctitle="API Documentation for HMI Core packages"
            private="true" 
            use="true"
            author="true"
            link="http://java.sun.com/javase/8/docs/api/"
            breakiterator="yes"
        >
<!--
            header="&lt;a href='http://hmi.ewi.utwente.nl' target='_blank'&gt;HMI Homepage&lt;/a%gt;" 
            footer="&lt;a href='http://hmi.ewi.utwente.nl' target='_blank'&gt;HMI Homepage&lt;/a%gt;" 
            bottom="Disclaimer, availability, License..."
-->
            <classpath refid="javac-classpath"/>
                <group title="HmiAnimation" packages="hmi.animation*"/>
                <group title="HmiFaceAnimation" packages="hmi.faceanimation*"/>
                <group title="HmiFaceGraphics" packages="hmi.facegraphics*"/>
                <group title="HmiGraphics" packages="hmi.graphics*"/>
                <group title="HmiMath" packages="hmi.math*"/>
                <group title="HmiNeurophysics" packages="hmi.neurophysics*"/>
                <group title="HmiPhysics" packages="hmi.physics*"/>
                <group title="HmiTestUtil" packages="hmi.testutil*"/>
                <group title="HmiTTS" packages="hmi.tts*"/>
                <group title="HmiUtil" packages="hmi.util*"/>
                <group title="HmiXml" packages="hmi.xml*"/>
                <sourcepath>
                    <pathelement path="HmiAnimation/${src.doc.dir}"/>
                    <pathelement path="HmiAnimationUI/${src.doc.dir}"/>
                    <pathelement path="HmiFaceAnimation/${src.doc.dir}"/>
                    <pathelement path="HmiFaceAnimationUI/${src.doc.dir}"/>
                    <pathelement path="HmiFaceGraphics/${src.doc.dir}"/>
                    <pathelement path="HmiGraphics/${src.doc.dir}"/>
                    <pathelement path="HmiMath/${src.doc.dir}"/>
                    <pathelement path="HmiNeurophysics/${src.doc.dir}"/>
                    <pathelement path="HmiPhysics/${src.doc.dir}"/>
                    <pathelement path="HmiTestUtil/${src.doc.dir}"/>
                    <pathelement path="HmiTTS/${src.doc.dir}"/>
                    <pathelement path="HmiTTSMary5/${src.doc.dir}"/>
                    <pathelement path="HmiTTSSapi5/${src.doc.dir}"/>
                    <pathelement path="HmiUtil/${src.doc.dir}"/>
                    <pathelement path="HmiXml/${src.doc.dir}"/>
                </sourcepath>
        </javadoc>
        <mkdir dir="${dist.dir}"/>
	     <zip basedir="${javadoc.dir}" destfile="${dist.dir}/javadoc.zip" />
    </target>
    
    <target name="javancssAll" description="Generate a javancs report">
      <mkdir dir="${build.classes.dir}"/>
      <javancss srcdir="."
            generateReport="true"
            format="xml"
             outputfile="${build.classes.dir}/javancss_metrics.xml"
            abortOnFail="false"
            includes="**/*.java"
            />
    </target> 
</project>
