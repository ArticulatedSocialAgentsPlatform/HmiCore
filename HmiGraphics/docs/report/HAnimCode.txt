
   /**
    * Sets all skeletons into HAnim pose
    */
   public  void GScene.setSkeletonHAnimPoses() {
    
       for (GNode skeletonRoot : skeletonRoots) {
          Skeletons.setHAnimPose(skeletonRoot.getVJoint());
       }
       calculateVJointMatrices();
       Skeletons.setNeutralPoses(skeletonRoots, skinnedMeshList, rootNodes);
         
   }
   ======================================
   /**
    * Defines the current pose to be the "neutral pose", i.e. the pose assumed when no joint rotations are set. 
    * This will typically be a pose like the HAnim pose. 
    */
   public static void Skeletons.setNeutralPoses(List<GNode> skeletonRoots, List<GSkinnedMesh> skinnedMeshList, List<GNode> roots) {  
      for (GNode skeletonRoot: skeletonRoots) {  
         VJoint rootJoint = skeletonRoot.getVJoint();
    
         prepareBindPose(rootJoint);
         rootJoint.calculateMatrices();  
      }
      
      
      for (GSkinnedMesh gsm : skinnedMeshList) {
          gsm.setBindPose();
      } 
      for (GNode skelRoot : skeletonRoots) {
         skelRoot.clearJointRotations(); 
      }
   }
   ======================================
   /*
    * assuming that we have reached the current pose from a bind pose where all rotation was Id, 
    * we want to prepare a pose that can be used to set the new bind pose. 
    */
   private static void Skeletons.prepareBindPose(VJoint joint) {
       float[] localTranslation = Vec3f.getVec3f();
       float[] rotations = Mat4f.getMat4f();
       
       if (joint.getParent() != null) {
          joint.getTranslation(localTranslation);
          Mat4f.set(rotations, joint.getParent().getGlobalMatrix());
          Mat4f.transformVector(rotations, localTranslation);
          joint.setTranslation(localTranslation);
       }
       for (VJoint child : joint.getChildren()) prepareBindPose(child);
   }
   ===================================
    public void GSkinnedMesh.setBindPose() 
    {
        if (inverseBindMatrices == null) initInverseBindMatrices();       
        float[] bindTranslation = Vec3f.getVec3f();
        float[] rotations = Mat4f.getMat4f();
        float[] zeroVec = Vec3f.getZero();
        
        for (int i = 0; i < inverseBindMatrices.length; i++) 
        {
            VJoint joint = jointNodes[i].getVJoint();
            Mat4f.set(rotations, joint.getGlobalMatrix());
            Mat4f.setTranslation(rotations, zeroVec);
           // Mat4f.clearRotationScale(inverseBindMatrices[i]); // check: this has no effect, so is Id already, after adjustBindPoses
            Mat4f.mul(inverseBindMatrices[i], rotations, inverseBindMatrices[i]);       
        }
    }